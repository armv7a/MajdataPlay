name: Build Project
run-name: MajdataPlay build
on: [push]
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      COMMIT_HASH_FULL: ${{ github.sha }}
      OUTPUT_NAME: MajdataPlay-Release
      CONFIGURATION: Release
      TARGET_PLATFORM: Android
      
    steps:
      - name: Get commit hash
        run: echo "COMMIT_HASH=$(echo ${{ env.COMMIT_HASH_FULL }} | cut -c1-7)" >> $GITHUB_ENV
        
      - name: Setup output filename
        run: echo "OUTPUT_NAME=MajdataPlay-${{ env.COMMIT_HASH }}-Release" >> $GITHUB_ENV
        
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Cache libraries
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ env.TARGET_PLATFORM }}
          restore-keys: Library-${{ env.TARGET_PLATFORM }}
          
      - name: Release build
        uses: game-ci/unity-builder@v4.3.0
        with:
          targetPlatform: ${{ env.TARGET_PLATFORM }}
          versioning: Semantic
          buildName: MajdataPlay
          buildsPath: ${{ env.CONFIGURATION }}
          androidArchitecture: ARM64  # 确保使用ARM64架构
          # 新增以下参数确保64位构建
          customParameters: -buildTarget Android -architecture ARM64
          # 可选：显式禁用32位构建
          androidAppBundle: false
          androidSplitApks: false

      - name: Verify architecture
        run: |
          apk_path=$(find ${{ env.CONFIGURATION }}/android -name "*.apk")
          if [ -z "$apk_path" ]; then
            echo "::error::APK file not found!"
            exit 1
          fi
          echo "Checking APK architecture for: $apk_path"
          unzip -l "$apk_path" | grep lib/arm64-v8a && echo "✅ ARM64 detected" || echo "❌ No ARM64 libraries found"
          unzip -l "$apk_path" | grep lib/armeabi-v7a && echo "⚠️  WARNING: ARM32 libraries detected" || true

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: ${{ env.CONFIGURATION }}
